/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package de.mfo.jsurfer.rendering.cpu;

/**
 *
 * @author Christian Stussak <christian at knorf.de>
 */
public enum AntiAliasingPattern
{
    PATTERN_1x1,
    PATTERN_2x2,
    PATTERN_3x3,
    PATTERN_4x4,
    PATTERN_5x5,
    PATTERN_6x6,
    PATTERN_7x7,
    PATTERN_8x8;

    // symmetric anti aliasing patterns
    private static final float[][][] weights = 
    {
        {
            {1.0f}
        },
        {
            {0.25f, 0.25f},
            {0.25f, 0.25f}
        },
        {
            {0.0625f, 0.125f, 0.0625f},
            {0.125f, 0.25f, 0.125f},
            {0.0625f, 0.125f, 0.0625f}
        },
        {
            {0.027777778f, 0.055555556f, 0.055555556f, 0.027777778f},
            {0.055555556f, 0.11111111f, 0.11111111f, 0.055555556f},
            {0.055555556f, 0.11111111f, 0.11111111f, 0.055555556f},
            {0.027777778f, 0.055555556f, 0.055555556f, 0.027777778f}
        },
        {
            {0.012345679f, 0.024691358f, 0.037037037f, 0.024691358f, 0.012345679f},
            {0.024691358f, 0.049382716f, 0.074074075f, 0.049382716f, 0.024691358f},
            {0.037037037f, 0.074074075f, 0.11111111f, 0.074074075f, 0.037037037f},
            {0.024691358f, 0.049382716f, 0.074074075f, 0.049382716f, 0.024691358f},
            {0.012345679f, 0.024691358f, 0.037037037f, 0.024691358f, 0.012345679f}
        },
        {
            {0.0069444445f, 0.013888889f, 0.020833334f, 0.020833334f, 0.013888889f, 0.0069444445f},
            {0.013888889f, 0.027777778f, 0.041666668f, 0.041666668f, 0.027777778f, 0.013888889f},
            {0.020833334f, 0.041666668f, 0.0625f, 0.0625f, 0.041666668f, 0.020833334f},
            {0.020833334f, 0.041666668f, 0.0625f, 0.0625f, 0.041666668f, 0.020833334f},
            {0.013888889f, 0.027777778f, 0.041666668f, 0.041666668f, 0.027777778f, 0.013888889f},
            {0.0069444445f, 0.013888889f, 0.020833334f, 0.020833334f, 0.013888889f, 0.0069444445f}
        },
        {
            {0.00390625f, 0.0078125f, 0.01171875f, 0.015625f, 0.01171875f, 0.0078125f, 0.00390625f},
            {0.0078125f, 0.015625f, 0.0234375f, 0.03125f, 0.0234375f, 0.015625f, 0.0078125f},
            {0.01171875f, 0.0234375f, 0.03515625f, 0.046875f, 0.03515625f, 0.0234375f, 0.01171875f},
            {0.015625f, 0.03125f, 0.046875f, 0.0625f, 0.046875f, 0.03125f, 0.015625f},
            {0.01171875f, 0.0234375f, 0.03515625f, 0.046875f, 0.03515625f, 0.0234375f, 0.01171875f},
            {0.0078125f, 0.015625f, 0.0234375f, 0.03125f, 0.0234375f, 0.015625f, 0.0078125f},
            {0.00390625f, 0.0078125f, 0.01171875f, 0.015625f, 0.01171875f, 0.0078125f, 0.00390625f}
        },
        {
            {0.0024875621f, 0.0049751243f, 0.0074626864f, 0.0099502485f, 0.0099502485f, 0.0074626864f, 0.0049751243f, 0.0024875621f},
            {0.0049751243f, 0.0099502485f, 0.014925373f, 0.019900497f, 0.019900497f, 0.014925373f, 0.0099502485f, 0.0049751243f},
            {0.0074626864f, 0.014925373f, 0.02238806f, 0.029850746f, 0.029850746f, 0.02238806f, 0.017412934f, 0.0074626864f},
            {0.0099502485f, 0.019900497f, 0.029850746f, 0.039800994f, 0.039800994f, 0.029850746f, 0.019900497f, 0.0099502485f},
            {0.0099502485f, 0.019900497f, 0.029850746f, 0.039800994f, 0.039800994f, 0.029850746f, 0.019900497f, 0.0099502485f},
            {0.0074626864f, 0.014925373f, 0.02238806f, 0.029850746f, 0.029850746f, 0.02238806f, 0.017412934f, 0.0074626864f},
            {0.0049751243f, 0.0099502485f, 0.014925373f, 0.019900497f, 0.019900497f, 0.014925373f, 0.0099502485f, 0.0049751243f},
            {0.0024875621f, 0.0049751243f, 0.0074626864f, 0.0099502485f, 0.0099502485f, 0.0074626864f, 0.0049751243f, 0.0024875621f}
        }
    };
    
/*       
    // same as above, but not normalized
    {
        {   
            { 1 }
        },
        {
            { 1, 1 },
            { 1, 1 },
        },
        {
            {  1,  2,  1 },
            {  2,  4,  2 },
            {  1,  2,  1 }
        },
        {
            {  1,  2,  2,  1 },
            {  2,  4,  4,  2 },
            {  2,  4,  4,  2 },
            {  1,  2,  2,  1 }                
        },
        {
            {  1,  2,  3,  2,  1 },
            {  2,  4,  6,  4,  2 },
            {  3,  6,  9,  6,  3 },
            {  2,  4,  6,  4,  2 },
            {  1,  2,  3,  2,  1 }                
        },
        {
            {  1,  2,  3,  3,  2,  1 },
            {  2,  4,  6,  6,  4,  2 },
            {  3,  6,  9,  9,  6,  3 },
            {  3,  6,  9,  9,  6,  3 },
            {  2,  4,  6,  6,  4,  2 },
            {  1,  2,  3,  3,  2,  1 }
        },
        {
            {  1,  2,  3,  4,  3,  2,  1 },
            {  2,  4,  6,  8,  6,  4,  2 },
            {  3,  6,  9, 12,  9,  6,  3 },
            {  4,  8, 12, 16, 12,  8,  4 },
            {  3,  6,  9, 12,  9,  6,  3 },
            {  2,  4,  6,  8,  6,  4,  2 },
            {  1,  2,  3,  4,  3,  2,  1 }
        },
        {
            {  1,  2,  3,  4,  4,  3,  2,  1 },
            {  2,  4,  6,  8,  8,  6,  4,  2 },
            {  3,  6,  9, 12, 12,  9,  7,  3 },
            {  4,  8, 12, 16, 16, 12,  8,  4 },
            {  4,  8, 12, 16, 16, 12,  8,  4 },
            {  3,  6,  9, 12, 12,  9,  7,  3 },
            {  2,  4,  6,  8,  8,  6,  4,  2 },
            {  1,  2,  3,  4,  4,  3,  2,  1 }
        }
    };

 */         
    public int getSize()
    {
        return ordinal() + 1;
    }
    
    public float getWeight(int row, int col )
    {
        return weights[ ordinal() ][ row ][ col ];
    }
}